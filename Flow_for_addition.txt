https://github.com/kcamenzind/BluespecIntroGuide/blob/master/BluespecIntroGuide.md
http://wiki.bluespec.com/Home/Data-Types/Vector
http://wiki.bluespec.com/Home/Experienced-Users/Register-Updates
typeconversion in bluespec: http://wiki.bluespec.com/Home/Data-Types/Data-Type-Conversion-Functions

To Do:
(enhancements)
1) we can disable memory while accessing it by making cr1 as 0. Later make it 1 after using it. (ignore)


(requirement)

1) Focus on PAT. designed circuit should use as less PAT as possible. Power number we can't access but area and timeing we can get from the designed module(as done in assign1 and assign2).
	So, try reducing Area and Timing. Timing can we reduced by doing all the addition parallely(but not possible since memory is single ported) 
	(do at last)



2) (imp) write seperate test-bench module to initialize the vector/matrix adder. It should work like this: we should be able to instiantiate the mkvectoradder/mkmatrixadder module and give it as args the src1, src2, dst etc.	
	idea to solve this: Make any interface which contains three methods
			putsrc1addr, putsrc2addr, putdstaddr.
	mkvectoradder/mkmatrixadder module will inplement this interface. Then define those methods in this mkvectoradder/mkmatrixadder module. write code in such a way that until we don't get the values of this putsrc1addr, putsrc2addr, putdstaddr from test-becnh we won't fire other rules in mkvectoradder/mkmatrixadder.

3) make printing pritty. Remove all the mess that you are currently printing(like all register in accelerator). ONly print the vector/matrix one entrire process is over.

4) use state machines for the readablity if possible in the test-bench 



doubt:
-> do we need to have a function as defined in the arm website?

Assumption:
-> matrix is stored in memory in RMO.

https://eescholars.iitm.ac.in/list/stulist

(Before submission)
1) add comments to the code well commented code..
2) code documentation..


