/**
	write a rule which read from the memory location 50 and 100 and write it to 150
	define MAR and MBR register to please address and data to read and write..
	define an array that we need to treat it as RAM/Main memory
	Flow is: MAR.load(50) -> MBR.write(ARRMEM[50]) -> MAR.load(100) -> MBR.write(ARRMEM[100])
	MAR.load(50) .. this is normal thing you can do
	MBR.write(ARRMEM[50]) .. this will need a analysis. You need to see how to declare the array and initalize it in bluespec rest is now easy.
*/

https://github.com/kcamenzind/BluespecIntroGuide/blob/master/BluespecIntroGuide.md
http://wiki.bluespec.com/Home/Data-Types/Vector
http://wiki.bluespec.com/Home/Experienced-Users/Register-Updates

To Do:
(enhancements)
1) size_t has bit size of 8(one byte) which is very small for the normal application. See if it can be replaced by CDADDRSIZE or CDDATASIZE. 
2) we can disable memory while accessing it by making cr1 as 0. Later make it 1 after using it.
(requirement)
1) we adding two unsigned numbers/vector/matrixes with current code make it for all cases like float,int etc.
2) Focus on PAT. designed circuit should use as less PAT as possible. Power number we can't access but area and timeing we can get from the designed module(as done in assign1 and assign2).
	So, try reducing Area and Timing.

Vector addition ideas:
comment in the code.. --\_('_')_/--

